// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using epic.Repositories;

#nullable disable

namespace epic.Repositories.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220612050558_SeedingTables")]
    partial class SeedingTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("epic.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("epic.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 6, 12, 10, 35, 58, 187, DateTimeKind.Local).AddTicks(7559),
                            Email = "admin@gmail.com",
                            FirstName = "Super",
                            IsActive = true,
                            LastActive = new DateTime(2022, 6, 12, 10, 35, 58, 187, DateTimeKind.Local).AddTicks(7561),
                            LastName = "Admin",
                            PasswordHash = new byte[] { 90, 136, 234, 13, 199, 143, 151, 166, 206, 63, 44, 126, 248, 88, 237, 31, 42, 114, 166, 127, 252, 147, 105, 17, 170, 166, 253, 137, 242, 150, 24, 11, 126, 114, 60, 53, 17, 127, 68, 137, 184, 85, 218, 235, 217, 121, 52, 62, 85, 112, 141, 229, 238, 99, 108, 239, 104, 0, 50, 155, 101, 104, 104, 203 },
                            PasswordSalt = new byte[] { 101, 105, 146, 222, 54, 226, 77, 79, 32, 110, 179, 47, 169, 198, 21, 243, 122, 28, 124, 243, 9, 70, 149, 181, 142, 179, 36, 163, 13, 42, 97, 132, 218, 239, 214, 66, 151, 156, 124, 253, 74, 113, 186, 89, 244, 178, 160, 105, 158, 241, 223, 39, 106, 19, 177, 175, 210, 137, 17, 96, 159, 220, 106, 70, 174, 23, 17, 200, 222, 230, 152, 188, 249, 68, 176, 150, 85, 78, 150, 238, 168, 156, 203, 73, 151, 120, 117, 25, 1, 253, 113, 72, 226, 28, 100, 87, 9, 200, 156, 255, 222, 26, 156, 13, 112, 54, 77, 205, 13, 167, 204, 80, 96, 180, 75, 46, 252, 18, 158, 6, 148, 128, 32, 38, 15, 94, 183, 252 },
                            RefreshToken = "VBj9IOAJtZwrMiHizKy2FkOmxM6PCJw9u9vepY4lbIg=",
                            RefreshTokenExpiryTime = new DateTime(2022, 6, 12, 10, 35, 58, 187, DateTimeKind.Local).AddTicks(7557),
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 6, 12, 10, 35, 58, 187, DateTimeKind.Local).AddTicks(7570),
                            Email = "user@gmail.com",
                            FirstName = "Super",
                            IsActive = true,
                            LastActive = new DateTime(2022, 6, 12, 10, 35, 58, 187, DateTimeKind.Local).AddTicks(7572),
                            LastName = "User",
                            PasswordHash = new byte[] { 90, 136, 234, 13, 199, 143, 151, 166, 206, 63, 44, 126, 248, 88, 237, 31, 42, 114, 166, 127, 252, 147, 105, 17, 170, 166, 253, 137, 242, 150, 24, 11, 126, 114, 60, 53, 17, 127, 68, 137, 184, 85, 218, 235, 217, 121, 52, 62, 85, 112, 141, 229, 238, 99, 108, 239, 104, 0, 50, 155, 101, 104, 104, 203 },
                            PasswordSalt = new byte[] { 101, 105, 146, 222, 54, 226, 77, 79, 32, 110, 179, 47, 169, 198, 21, 243, 122, 28, 124, 243, 9, 70, 149, 181, 142, 179, 36, 163, 13, 42, 97, 132, 218, 239, 214, 66, 151, 156, 124, 253, 74, 113, 186, 89, 244, 178, 160, 105, 158, 241, 223, 39, 106, 19, 177, 175, 210, 137, 17, 96, 159, 220, 106, 70, 174, 23, 17, 200, 222, 230, 152, 188, 249, 68, 176, 150, 85, 78, 150, 238, 168, 156, 203, 73, 151, 120, 117, 25, 1, 253, 113, 72, 226, 28, 100, 87, 9, 200, 156, 255, 222, 26, 156, 13, 112, 54, 77, 205, 13, 167, 204, 80, 96, 180, 75, 46, 252, 18, 158, 6, 148, 128, 32, 38, 15, 94, 183, 252 },
                            RefreshToken = "VBj9IOAJtZwrMiHizKy2FkOmxM6PCJw9u9vepY4lbIg=",
                            RefreshTokenExpiryTime = new DateTime(2022, 6, 12, 10, 35, 58, 187, DateTimeKind.Local).AddTicks(7569),
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("epic.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 2,
                            UserId = 2
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
