// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using epic.Repositories;

#nullable disable

namespace epic.Repositories.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220612051405_SeedingTables1")]
    partial class SeedingTables1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("epic.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("epic.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 6, 12, 10, 44, 5, 446, DateTimeKind.Local).AddTicks(2871),
                            Email = "admin@gmail.com",
                            FirstName = "Super",
                            IsActive = true,
                            LastActive = new DateTime(2022, 6, 12, 10, 44, 5, 446, DateTimeKind.Local).AddTicks(2872),
                            LastName = "Admin",
                            PasswordHash = new byte[] { 128, 88, 75, 56, 189, 255, 83, 17, 203, 147, 97, 171, 138, 115, 12, 181, 124, 214, 117, 66, 172, 218, 203, 37, 33, 40, 15, 26, 155, 0, 236, 194, 139, 84, 222, 203, 57, 45, 84, 65, 221, 49, 93, 127, 80, 93, 110, 35, 128, 122, 103, 37, 191, 177, 154, 29, 175, 71, 55, 216, 87, 112, 114, 211 },
                            PasswordSalt = new byte[] { 239, 87, 149, 81, 74, 66, 119, 248, 193, 124, 105, 28, 115, 208, 167, 116, 27, 231, 222, 158, 82, 116, 179, 112, 235, 215, 229, 246, 29, 38, 53, 96, 105, 178, 69, 45, 156, 145, 249, 13, 154, 204, 192, 145, 116, 176, 85, 35, 25, 184, 220, 76, 201, 217, 206, 226, 122, 114, 54, 203, 173, 70, 16, 4, 10, 239, 93, 67, 65, 225, 113, 73, 233, 177, 51, 40, 58, 106, 13, 236, 98, 87, 81, 215, 80, 3, 241, 219, 144, 44, 142, 134, 130, 242, 152, 127, 127, 64, 97, 156, 189, 221, 16, 223, 71, 35, 122, 120, 235, 155, 251, 69, 160, 199, 21, 135, 79, 61, 169, 127, 102, 19, 84, 191, 7, 36, 13, 212 },
                            RefreshToken = "VBj9IOAJtZwrMiHizKy2FkOmxM6PCJw9u9vepY4lbIg=",
                            RefreshTokenExpiryTime = new DateTime(2022, 6, 12, 10, 44, 5, 446, DateTimeKind.Local).AddTicks(2871),
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 6, 12, 10, 44, 5, 446, DateTimeKind.Local).AddTicks(2876),
                            Email = "user@gmail.com",
                            FirstName = "Super",
                            IsActive = true,
                            LastActive = new DateTime(2022, 6, 12, 10, 44, 5, 446, DateTimeKind.Local).AddTicks(2876),
                            LastName = "User",
                            PasswordHash = new byte[] { 128, 88, 75, 56, 189, 255, 83, 17, 203, 147, 97, 171, 138, 115, 12, 181, 124, 214, 117, 66, 172, 218, 203, 37, 33, 40, 15, 26, 155, 0, 236, 194, 139, 84, 222, 203, 57, 45, 84, 65, 221, 49, 93, 127, 80, 93, 110, 35, 128, 122, 103, 37, 191, 177, 154, 29, 175, 71, 55, 216, 87, 112, 114, 211 },
                            PasswordSalt = new byte[] { 239, 87, 149, 81, 74, 66, 119, 248, 193, 124, 105, 28, 115, 208, 167, 116, 27, 231, 222, 158, 82, 116, 179, 112, 235, 215, 229, 246, 29, 38, 53, 96, 105, 178, 69, 45, 156, 145, 249, 13, 154, 204, 192, 145, 116, 176, 85, 35, 25, 184, 220, 76, 201, 217, 206, 226, 122, 114, 54, 203, 173, 70, 16, 4, 10, 239, 93, 67, 65, 225, 113, 73, 233, 177, 51, 40, 58, 106, 13, 236, 98, 87, 81, 215, 80, 3, 241, 219, 144, 44, 142, 134, 130, 242, 152, 127, 127, 64, 97, 156, 189, 221, 16, 223, 71, 35, 122, 120, 235, 155, 251, 69, 160, 199, 21, 135, 79, 61, 169, 127, 102, 19, 84, 191, 7, 36, 13, 212 },
                            RefreshToken = "VBj9IOAJtZwrMiHizKy2FkOmxM6PCJw9u9vepY4lbIg=",
                            RefreshTokenExpiryTime = new DateTime(2022, 6, 12, 10, 44, 5, 446, DateTimeKind.Local).AddTicks(2875),
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("epic.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 2,
                            UserId = 2
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
